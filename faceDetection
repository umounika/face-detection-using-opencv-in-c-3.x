#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>

#include <iostream>

using namespace cv;
using namespace std;


String face_cascade_name = "/usr/share/opencv/haarcascades/haarcascade_frontalface_default.xml";
CascadeClassifier face_cascade;
String window_name = "face detection ";

int main()
{
	std::vector<Rect> faces;
	Mat frame_gray;

	if(!face_cascade.load(face_cascade_name))
	{
		cout<<"Error loading";
		return (-1);
	}

	VideoCapture stream(0);
	if(!stream.isOpened())
	{
		cout<<"cannot open camera";
	}

	while(1)
	{
		cv::Mat cameraframe;
		stream.read(cameraframe);
		cvtColor(cameraframe,frame_gray,COLOR_BGR2GRAY);
		equalizeHist(frame_gray,frame_gray);
		//detect face
		face_cascade.detectMultiScale(frame_gray,faces,1.1,2,0,Size(80,80));
		Rect roi_b;
		Rect roi_c;
		size_t ic=0;
		int ac=0;
		size_t ib=0;
		int ab=0;

		for(ic=0;ic<faces.size();ic++)
		{
			roi_c.x=faces[ic].x;
			roi_c.y=faces[ic].y;
			roi_c.width=faces[ic].width;
			roi_c.height=faces[ic].height;

			//draw rectangle
			 rectangle( cameraframe, Point( roi_c.x,roi_c.y ), Point(roi_c.x+roi_c.width,roi_c.y+roi_c.height ), Scalar( 0, 55, 255 ), +1, 4 );
		}


		imshow("cam",cameraframe);

		if (waitKey(30) >= 0)
			break;
	}

return 0;
}

